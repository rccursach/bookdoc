<?php

/**
 * Implements hook_permission().
 */
function bookdoc_permission(){
	return array(
		'bookdoc doc conversion module' => array(
			'title' => t('Allow access'),
			'description' => t('Permits to see the module view/block'),
		),
	);
}

/**
 * Implements hook_menu().
 */
function bookdoc_menu(){
	$items = array();

	$items['bookdoc'] = array(
		'title' => 'bookdoc',
		'page callback' => 'bookdoc_basic', // Function callback to render when accessing mysite.com/bookdoc
		//'access callback' => 'user_access', //call user_access('access content') is default behaviour if we dont specify another, so i leave it commented.
		'access arguments' => array('access content'),
		//'file' => 'bookdoc.menu.inc', //moved to main file due to the very short lenght of the function code, thanks to to a rewrite using forms.
		'type' => MENU_NORMAL_ITEM | MENU_LOCAL_TASK,
	);

	return $items;
}

/**
 * Implements bookdoc_basic().
 *
 * Default view to render when accessing mysite.com/bookdoc
 */
function bookdoc_basic(){
	return drupal_get_form('bookdoc_form');
}


//
// Form and file upload hooks and functions
//


/**
 * Implements hook_form()
 */
function bookdoc_form($form, &$form_state) {
  $form['file'] = array(
    '#type' => 'file',
    '#title' => t('Subir un documento a bookdoc'),
    '#description' => t('Seleccione el documento que desea subir'),
  );

  $form['title'] = array(
    '#type' => 'textfield',
    '#title' => t('Título'),
    '#description' => t('Título del documento.'),
  );

  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Subir archivo'),
  );

  return $form;
}

/**
 * Form validation
 * Save the file as temporary file
 */
function bookdoc_form_validate($form, &$form_state) {
  $file = file_save_upload('file', array(), 'public://'.variable_get(gettimeofday()['sec'].'file', ''), FILE_EXISTS_RENAME);

  // Stores the file object to handle it later in the submit function
  if ($file) { // File saved successfully
    $form_state['storage']['file'] = $file;
  }
  else { // Error while saving file
    form_set_error('file', t('No se logró subir el archivo'));
  }
}

/**
 * Form submit
 */
function bookdoc_form_submit($form, &$form_state) {
  // Get the file object
  $file = $form_state['storage']['file'];
  
  $title = $form_state['values']['title'];
  // Get the file path
  $file_path = drupal_realpath($file->uri);

  //get local path
	$url = file_create_url('public://');
	$url = parse_url($url);
	$local_path = $url['path'];

  //process document file to html
  $html_file = process_document_file($file_path, $file->filename, $local_path);

  //create book
  create_book($title, $html_file);
}

function process_document_file($filepath, $filename, $local_path){
	$html_dir = str_replace('.', '_html_', $filepath).gettimeofday()['sec'];
	$html_file = $html_dir.'/'.str_replace('.', '_', $filename).'.html';

	//security str replacement to avoid accessing sensible files
	//on malformed filenames
	$html_file = str_replace('/../', '/', $html_file);
	$html_file = str_replace('~/', '', $html_file);

	$path_arr = explode('/', $html_dir);
	$local_path = $local_path . $path_arr[count($path_arr)-1];

	$cmd_line = 'sudo /usr/bin/unoconv -v -f html -o '.$html_file.' '.$filepath;
	$unoconv_output = shell_exec($cmd_line);
	
	$rb_script = drupal_get_path('module', 'bookdoc').'/fix_img_uri.rb';
	$rb_script = drupal_realpath($rb_script);

	$cmd_line = "sudo /usr/bin/env ruby ".$rb_script." ".$html_file." ".$local_path;
	$fixpath_out = shell_exec($cmd_line);


	if ($unoconv_output){
 		drupal_set_message('La conversión se logró con exito.', 'status');
 		drupal_set_message('Correción de rutas para imágenes: '.$fixpath_out.".", 'status');
 		return $html_file;
	}
	else{
		drupal_set_message('No se pudo convertir el archivo: ' . ($unoconv_output == "" ? "Error desconocido" : $unoconv_output), 'error');
	}
	return '';
}

function create_book($title, $file_path){
	$node = new stdClass();
	$node->type = "book";
	$node->title = $title;
	$node->language = LANGUAGE_NONE;
	$node->uid = 1;
	$node->status = 1; //publish on submit
	$node->promote = 1; //and promote

	node_object_prepare($node);

	//[todo] validate outputs
	//$data = mb_convert_encoding(file_get_contents($file_path), "UTF-8");
	$rb_script = drupal_get_path('module', 'bookdoc').'/readfile.rb';
	$rb_script = drupal_realpath($rb_script);
	$cmd_line = "sudo /usr/bin/env ruby ".$rb_script." ".$file_path;
	$data = shell_exec($cmd_line);
	$data = mb_convert_encoding($data, "UTF-8");

	if($data){
		$node->body[$node->language][0]['value'] = $data;
		$node->body[$node->language][0]['format'] = 'basic_html';
		$node = node_submit($node);
		node_save($node);
	}
	else{
		drupal_set_message('No se pudo leer el archivo html mientras se generaba el book', 'error');
	}
}